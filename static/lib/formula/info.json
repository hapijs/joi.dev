{
  "name": "formula",
  "versions": [
    {
      "name": "3.0.2",
      "branch": "v3.0.2",
      "license": "BSD",
      "node": [
        "14",
        "16",
        "18"
      ]
    }
  ],
  "versionsArray": [
    "3.0.2"
  ],
  "docs": {
    "3.0.2": {
      "menu": {
        "id": null,
        "text": null,
        "children": [
          {
            "id": "methods-1",
            "text": "Methods",
            "children": [
              {
                "id": "new-formulaparserformula-options",
                "text": "new Formula.Parser()"
              },
              {
                "id": "parserevaluatecontext",
                "text": "parser.evaluate()"
              }
            ]
          }
        ]
      },
      "api": "<h2 class=\"api-doc-header\" id=\"methods\">Methods</h2>\n<h3 class=\"api-doc-header\" id=\"new-formulaparserformula-options\"><code>new Formula.Parser(formula, [options])</code></h3>\n<p>Creates a new formula parser object where:</p>\n<ul>\n<li><code>formula</code> - the formula string to parse.</li>\n<li><code>options</code> - optional settings:<ul>\n<li><code>constants</code> - a hash of key-value pairs used to convert constants to values.</li>\n<li><code>tokenRx</code> - a regular expression used to validate token variables.</li>\n<li><code>reference</code> - a variable resolver factory function with signature <code>function(variable)</code> which returns a function with signature <code>function(context)</code> returning the resolved <code>variable</code>.</li>\n<li><code>functions</code> - a hash of key-value pairs used to resolve formula functions.</li>\n</ul>\n</li>\n</ul>\n<h3 class=\"api-doc-header\" id=\"parserevaluatecontext\"><code>parser.evaluate([context])</code></h3>\n<p>Evaluate the formula where:</p>\n<ul>\n<li><code>context</code> - optional object with runtime formula context used to resolve variables.</li>\n</ul>\n<p>Returns the string or number outcome of the resolved formula.</p>\n",
      "intro": "",
      "example": "## Example\n\n```js\nconst Formula = require('@hapi/formula');\n\n\nconst functions = {\n    x: (value) => value + 10\n};\n\nconst constants = {\n    Z: 100\n};\n\nconst reference = function (name) {\n\n    return (context) => context[name];\n};\n\n\nconst formula = new Formula.Parser('1 + a.b.c.2.4.x + [b] + x([y + 4] + Z)', { functions, constants, reference });\n\nformula.evaluate({ 'a.b.c.2.4.x': 2, b: 3, 'y + 4': 5 });       // 1 + 2 + 3 + 5 + 10 + 100\nformula.evaluate({ 'a.b.c.2.4.x': '2', b: 3, 'y + 4': '5' });   // '123510010'\n```\n\n",
      "usage": "",
      "faq": "",
      "advanced": "",
      "license": "BSD"
    }
  },
  "api": true,
  "slogan": "Math and string formula parser.",
  "forks": 19,
  "stars": 14,
  "updated": "2023-08-14T22:41:21Z",
  "link": "https://github.com/hapijs/formula"
}