{
  "name": "formula",
  "versions": [
    {
      "name": "3.0.2",
      "branch": "v3.0.2",
      "license": "BSD",
      "node": [
        "14",
        "16",
        "18",
        "20",
        "22"
      ]
    }
  ],
  "versionsArray": [
    "3.0.2"
  ],
  "docs": {
    "3.0.2": {
      "menu": {
        "id": null,
        "text": null,
        "children": [
          {
            "id": "methods-1",
            "text": "Methods",
            "children": [
              {
                "id": "new-formulaparserformula-options",
                "text": "new Formula.Parser()"
              },
              {
                "id": "parserevaluatecontext",
                "text": "parser.evaluate()"
              }
            ]
          }
        ]
      },
      "api": "<h2 class=\"api-doc-header\" id=\"methods\">Methods</h2>\n<h3 class=\"api-doc-header\" id=\"new-formulaparserformula-options\"><code>new Formula.Parser(formula, [options])</code></h3>\n<p>Creates a new formula parser object where:</p>\n<ul>\n<li><code>formula</code> - the formula string to parse.</li>\n<li><code>options</code> - optional settings:<ul>\n<li><code>constants</code> - a hash of key-value pairs used to convert constants to values.</li>\n<li><code>tokenRx</code> - a regular expression used to validate token variables.</li>\n<li><code>reference</code> - a variable resolver factory function with signature <code>function(variable)</code> which returns a function with signature <code>function(context)</code> returning the resolved <code>variable</code>.</li>\n<li><code>functions</code> - a hash of key-value pairs used to resolve formula functions.</li>\n</ul>\n</li>\n</ul>\n<h3 class=\"api-doc-header\" id=\"parserevaluatecontext\"><code>parser.evaluate([context])</code></h3>\n<p>Evaluate the formula where:</p>\n<ul>\n<li><code>context</code> - optional object with runtime formula context used to resolve variables.</li>\n</ul>\n<p>Returns the string or number outcome of the resolved formula.</p>\n",
      "intro": "",
      "example": "<h2 class=\"api-doc-header\" id=\"example\">Example</h2>\n<div class=\"code-snippet\"><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Formula</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@hapi/formula&#x27;</span>);\n\n\n<span class=\"hljs-keyword\">const</span> functions = {\n    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> value + <span class=\"hljs-number\">10</span>\n};\n\n<span class=\"hljs-keyword\">const</span> constants = {\n    <span class=\"hljs-attr\">Z</span>: <span class=\"hljs-number\">100</span>\n};\n\n<span class=\"hljs-keyword\">const</span> reference = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) {\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">context</span>) =&gt;</span> context[name];\n};\n\n\n<span class=\"hljs-keyword\">const</span> formula = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Formula</span>.<span class=\"hljs-title class_\">Parser</span>(<span class=\"hljs-string\">&#x27;1 + a.b.c.2.4.x + [b] + x([y + 4] + Z)&#x27;</span>, { functions, constants, reference });\n\nformula.evaluate({ <span class=\"hljs-string\">&#x27;a.b.c.2.4.x&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;y + 4&#x27;</span>: <span class=\"hljs-number\">5</span> });       <span class=\"hljs-comment\">// 1 + 2 + 3 + 5 + 10 + 100</span>\nformula.evaluate({ <span class=\"hljs-string\">&#x27;a.b.c.2.4.x&#x27;</span>: <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;y + 4&#x27;</span>: <span class=\"hljs-string\">&#x27;5&#x27;</span> });   <span class=\"hljs-comment\">// &#x27;123510010&#x27;</span>\n</code></pre>\n</div>",
      "usage": "",
      "faq": "",
      "advanced": "",
      "license": "BSD"
    }
  },
  "api": true,
  "slogan": "Math and string formula parser.",
  "forks": 22,
  "stars": 16,
  "updated": "2024-02-02T16:21:44Z",
  "link": "https://github.com/hapijs/formula"
}