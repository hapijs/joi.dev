{"styleguide":"<h1 class=\"api-doc-header\" id=\"coding-conventions\">Coding Conventions</h1>\n<h2 class=\"api-doc-header\" id=\"javascript\">JavaScript</h2>\n<h3 class=\"api-doc-header\" id=\"language\">Language</h3>\n<h4 class=\"api-doc-header\" id=\"strict-mode\">Strict Mode</h4>\n<ul>\n<li>The first line of every file should be <code>&#39;use strict&#39;;</code>. If the file contains a shebang, strict mode should be enabled on the second line.</li>\n<li>The strict mode directive should be followed by a blank line.</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n<span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;even when not required&#x27;</span>);\n\n<span class=\"hljs-comment\">// Also right</span>\n#!<span class=\"hljs-regexp\">/usr/</span>bin/env node\n<span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;even when not required&#x27;</span>);\n\n<span class=\"hljs-comment\">// Wrong</span>\n<span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;even when not required&#x27;</span>)\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"semicolon\">Semicolon</h4>\n<ul>\n<li>Always end statements with <code>;</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;even when not required&#x27;</span>);\n\n<span class=\"hljs-comment\">// Wrong</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;even when not required&#x27;</span>)\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"variable-declarations\">Variable declarations</h4>\n<ul>\n<li>Any variable that is only assigned once should be defined using <code>const</code>.</li>\n<li>Any variable that is assigned multiple times should be defined using <code>let</code>.</li>\n<li>Variables should not be declared using <code>var</code>.</li>\n<li>Declare on first use, not at top of function; <a href=\"#prototype-members\">self</a> being an exception</li>\n<li>Do not chain declarations unless inside <code>for</code> parentheses (repeat <code>const</code> or <code>let</code> for each variable in a separate statement)</li>\n<li>Give descriptive names<ul>\n<li>Do not use similar names or synonyms for different variables unless following a convention</li>\n<li><code>for...in</code> iterators should use descriptive names</li>\n<li><code>for</code> iterators should use single character names</li>\n<li>Use combination of plural for array and singular for each item in the array</li>\n</ul>\n</li>\n<li>Use camelCase, never underscores</li>\n<li>Avoid using numbered variables (e.g. i1, i2, i3)</li>\n</ul>\n<h4 class=\"api-doc-header\" id=\"scope\">Scope</h4>\n<ul>\n<li>No implicit or single statement scopes</li>\n<li>All scopes must be wrapped in <code>{}</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    <span class=\"hljs-keyword\">return</span>;\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) <span class=\"hljs-keyword\">return</span>;\n\n<span class=\"hljs-keyword\">if</span> (condition)\n    <span class=\"hljs-keyword\">return</span>;\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"for-loops\">For loops</h4>\n<ul>\n<li>Iterator variable should be declared inside the <code>for</code> parentheses, unless already defined</li>\n<li>Iterator variables should be named <code>i</code> if possible. Nested <code>for</code> loops use <code>j</code>, <code>k</code>, etc.</li>\n<li>Use <code>for</code> with arrays, <code>for...in</code> for objects (and always check <code>hasOwnProperty()</code>)</li>\n<li>Always <code>++i</code>, never <code>i++</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;john&#x27;</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; name.<span class=\"hljs-property\">length</span>; ++i) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name[i]);\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">let</span> position;\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;john&#x27;</span> ;\n<span class=\"hljs-keyword\">const</span> len = name.<span class=\"hljs-property\">length</span>;\n\n<span class=\"hljs-keyword\">for</span> (position = <span class=\"hljs-number\">0</span>; position &lt; len; position++) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name[position]) ;\n}\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"prototype-members\">Prototype members</h4>\n<ul>\n<li>Prefix private members with <code>_</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Example</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">method</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">public</span> = <span class=\"hljs-string\">&#x27;external&#x27;</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_private</span> = <span class=\"hljs-string\">&#x27;internal&#x27;</span>;\n};\n</code></pre>\n</div><ul>\n<li>Define <code>self</code> for passing <code>this</code> into nested functions</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Example</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">method</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-variable language_\">this</span>;\n\n    <span class=\"hljs-title function_\">call</span>(<span class=\"hljs-number\">123</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) {\n\n        self.<span class=\"hljs-title function_\">display</span>(err);\n    });\n};\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"function-declaration\">Function declaration</h4>\n<ul>\n<li>Declare functions via assignment</li>\n<li>Arrow function arguments must be enclosed in parentheses</li>\n<li>Arrow function bodies must be enclosed in curly braces</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> method = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">arrow</span> = (<span class=\"hljs-params\">foo</span>) =&gt; {\n\n    <span class=\"hljs-keyword\">return</span> bar;\n};\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">method</span>(<span class=\"hljs-params\"></span>) {\n\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">arrow</span> = foo =&gt; bar;\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"enforcing-new-on-constructor\">Enforcing new on Constructor</h4>\n<ul>\n<li>Use <code>this instanceof</code> to check if a constructor function was called with new. (This allows for future prototypical inheritance.)</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Hoek</span>.<span class=\"hljs-title function_\">assert</span>(<span class=\"hljs-variable language_\">this</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Server</span>, <span class=\"hljs-string\">&#x27;Server must be instantiated using new&#x27;</span>);\n</code></pre>\n</div><h3 class=\"api-doc-header\" id=\"style\">Style</h3>\n<h4 class=\"api-doc-header\" id=\"whitespace\">Whitespace</h4>\n<ul>\n<li>Always spaces, never tabs</li>\n<li>4 spaces indents</li>\n<li>No trailing whitespace at end-of-line</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">if</span> (test) {\n    <span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-number\">12</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;result&#x27;</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">if</span> (test) {\n  <span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-number\">12</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;result&#x27;</span>);\n  }\n}\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"string-literals\">String literals</h4>\n<ul>\n<li>Always <code>&#39;</code> never <code>&quot;</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n<span class=\"hljs-keyword\">const</span> string = <span class=\"hljs-string\">&#x27;text in single quotes&#x27;</span>;\n\n<span class=\"hljs-comment\">// Wrong</span>\n<span class=\"hljs-keyword\">const</span> string = <span class=\"hljs-string\">&quot;text in single quotes&quot;</span>;\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"newlines\">Newlines</h4>\n<ul>\n<li><p>all files need to end with a newline (or more accurately end of line).  IDEs will often do a line separator instead.  This is to ensure it is unix friendly.  The &quot;cat&quot; command is a good example of seeing this behavior.  Git does a good job of pointing these out when doing pull requests.  </p>\n</li>\n<li><p>Two empty lines between module functions or assignments (end of function to comment about next function)</p>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">get</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-comment\">// Some code</span>\n};\n                                                            <span class=\"hljs-comment\">// 1</span>\n                                                            <span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">/**\n * jsDoc comment\n */</span>\ninternals.<span class=\"hljs-property\">utility</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-comment\">//Some code</span>\n};\n</code></pre>\n</div><ul>\n<li>Newline after <code>{</code> except for inlined or empty objects<ul>\n<li>Inline an object when it improves readability and unlikely to change often</li>\n<li>No inline object in assignment unless empty</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    <span class=\"hljs-title function_\">execute</span>(value, { <span class=\"hljs-attr\">strict</span>: <span class=\"hljs-literal\">true</span> });\n}\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    <span class=\"hljs-keyword\">const</span> options = {\n        <span class=\"hljs-attr\">strict</span>: <span class=\"hljs-literal\">true</span>\n    };\n    <span class=\"hljs-title function_\">execute</span>(value, options);\n}\n\n<span class=\"hljs-keyword\">const</span> empty = {};\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) { <span class=\"hljs-title function_\">execute</span>(value, { <span class=\"hljs-attr\">strict</span>: <span class=\"hljs-literal\">true</span> }); }\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    <span class=\"hljs-keyword\">const</span> options = { <span class=\"hljs-attr\">strict</span>: <span class=\"hljs-literal\">true</span> };\n    <span class=\"hljs-title function_\">execute</span>(value, options);\n}\n\n<span class=\"hljs-keyword\">const</span> empty = {\n};\n</code></pre>\n</div><ul>\n<li>Newline after <code>}</code><ul>\n<li>Only exception is when followed by <code>,</code>, <code>;</code>, <code>);</code> which must be followed by a newline</li>\n<li>Includes before <code>else</code>, <code>catch</code>, etc.</li>\n<li>Empty line after <code>}</code> if not last statement in scope</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    value = {\n        <span class=\"hljs-attr\">func</span>: <span class=\"hljs-function\">() =&gt;</span> {\n\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;example&#x27;</span>);\n        },\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;hello&#x27;</span>\n    };\n\n    <span class=\"hljs-title function_\">execute</span>(value, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);\n    });\n}\n<span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;otherwise&#x27;</span>);\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    value = {\n        <span class=\"hljs-attr\">func</span>: <span class=\"hljs-function\">() =&gt;</span> {\n\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;example&#x27;</span>);\n        }, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;hello&#x27;</span>\n    };\n    <span class=\"hljs-title function_\">execute</span>(value, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err); }\n    );\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;otherwise&#x27;</span>);\n}\n</code></pre>\n</div><ul>\n<li>Empty line after <code>{</code><ul>\n<li>Following a multi-line condition</li>\n<li>In function scope declarations</li>\n<li>In arrow function declarations using curly braces</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">method</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-keyword\">if</span> (condition) {\n        <span class=\"hljs-keyword\">if</span> (otherCondition) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;sometimes&#x27;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (result &amp;&amp;\n            result.<span class=\"hljs-property\">statusCode</span> === <span class=\"hljs-number\">200</span>) {\n\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;special case&#x27;</span>);\n        }\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;always&#x27;</span>);\n    }\n\n    <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-number\">123</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);\n    });\n\n    <span class=\"hljs-keyword\">const</span> empty = {};\n};\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">method</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">if</span> (condition) {\n\n        <span class=\"hljs-keyword\">if</span> (otherCondition) {\n\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;sometimes&#x27;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (result &amp;&amp;\n            result.<span class=\"hljs-property\">statusCode</span> === <span class=\"hljs-number\">200</span>) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;special case&#x27;</span>);\n        }\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;always&#x27;</span>);\n    }\n\n    <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-number\">123</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);\n    });\n\n    <span class=\"hljs-keyword\">const</span> empty = {\n    };\n};\n</code></pre>\n</div><ul>\n<li>No empty line before end of scope</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    <span class=\"hljs-keyword\">if</span> (otherCondition) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;done&#x27;</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">if</span> (condition) {\n    <span class=\"hljs-keyword\">if</span> (otherCondition) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;done&#x27;</span>);\n\n    }\n\n}\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"spaces\">Spaces</h4>\n<ul>\n<li>Use one and only one space (when required)</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n<span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">calculate</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);\n\n<span class=\"hljs-comment\">// Wrong</span>\n<span class=\"hljs-keyword\">const</span>  value =  <span class=\"hljs-title function_\">calculate</span>(<span class=\"hljs-number\">1</span>,  <span class=\"hljs-number\">3</span>);\n</code></pre>\n</div><ul>\n<li>One space between function and <code>(</code> when declaring a function</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> example = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-keyword\">return</span> value;\n};\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> example = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-keyword\">return</span> value;\n};\n</code></pre>\n</div><ul>\n<li>No space between function name and <code>(</code> when invoking a function</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-title function_\">example</span>();\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> key = example ();\n</code></pre>\n</div><ul>\n<li>No space after <code>(</code> or before <code>)</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\">  <span class=\"hljs-comment\">// Right</span>\n\n  <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">&#x27;order&#x27;</span>, <span class=\"hljs-number\">34</span>);\n\n  <span class=\"hljs-keyword\">if</span> (result === <span class=\"hljs-string\">&#x27;ok&#x27;</span>) {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;success&#x27;</span>);\n  }\n\n  <span class=\"hljs-comment\">// Wrong</span>\n\n  <span class=\"hljs-title function_\">execute</span>( <span class=\"hljs-string\">&#x27;order&#x27;</span>, <span class=\"hljs-number\">34</span> );\n\n  <span class=\"hljs-keyword\">if</span> ( result === <span class=\"hljs-string\">&#x27;ok&#x27;</span> ) {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>( <span class=\"hljs-string\">&#x27;success&#x27;</span> );\n  }\n</code></pre>\n</div><ul>\n<li>No space before object key <code>:</code>, always after object key <code>:</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> obj = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span>\n};\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> obj = {\n    a : <span class=\"hljs-number\">1</span>,\n    b :<span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">c</span>:<span class=\"hljs-number\">3</span>\n};\n</code></pre>\n</div><ul>\n<li>No space before <code>;</code>, always after <code>;</code> if not end-of-line</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;john&#x27;</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; name.<span class=\"hljs-property\">length</span>; ++i) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name[i]);\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;john&#x27;</span> ;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i &lt; name.<span class=\"hljs-property\">length</span> ;++i) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name[i]) ;\n}\n</code></pre>\n</div><ul>\n<li>Always space after reserved keywords (<code>if</code>, <code>else</code>, <code>for</code>, <code>return</code>, <code>function</code>, etc.)</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> book <span class=\"hljs-keyword\">in</span> books) {\n    <span class=\"hljs-keyword\">if</span> (books.<span class=\"hljs-title function_\">hasOwnProperty</span>(book)) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(book.<span class=\"hljs-property\">name</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> book <span class=\"hljs-keyword\">in</span> books) {\n    <span class=\"hljs-keyword\">if</span>(books.<span class=\"hljs-title function_\">hasOwnProperty</span>(book)) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(book.<span class=\"hljs-property\">name</span>);\n    }\n}\n</code></pre>\n</div><ul>\n<li>Always space after <code>{</code> and before <code>}</code> in inlined object<ul>\n<li>No space for empty objects <code>{}</code></li>\n<li>One space for empty functions <code>{ }</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-title function_\">execute</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;john&#x27;</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;john@example.com&#x27;</span> });\n<span class=\"hljs-keyword\">const</span> empty = {};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">callback</span> = (<span class=\"hljs-params\"></span>) =&gt; { };\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-title function_\">execute</span>({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;john&#x27;</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;john@example.com&#x27;</span>});\n<span class=\"hljs-keyword\">const</span> empty = {  };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">callback</span> = (<span class=\"hljs-params\"></span>) =&gt; {};\n</code></pre>\n</div><ul>\n<li>No space after <code>[</code> and before <code>]</code> in inlined arrays</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n<span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-comment\">// Wrong</span>\n<span class=\"hljs-keyword\">const</span> numbers = [ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ];\n</code></pre>\n</div><ul>\n<li>Always space after <code>//</code></li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n<span class=\"hljs-comment\">// Some comment</span>\n\n<span class=\"hljs-comment\">// Wrong</span>\n<span class=\"hljs-comment\">//Some comment</span>\n</code></pre>\n</div><ul>\n<li>No space before <code>,</code>, always after <code>,</code> unless end-of-line</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-title function_\">execute</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;john&#x27;</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;john@example.com&#x27;</span> });\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; name.<span class=\"hljs-property\">length</span>; ++i) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name[i]);\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span> ,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-title function_\">execute</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;john&#x27;</span>,<span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;john@example.com&#x27;</span> });\n\n<span class=\"hljs-comment\">// This for loop violates the style guide, but illustrates incorrect spacing around a comma</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>,il = name.<span class=\"hljs-property\">length</span>; i &lt; il; ++i) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name[i]);\n}\n</code></pre>\n</div><ul>\n<li>Always space before and after operators, unless following an indent or end-of-line</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&#x27;john&#x27;</span> +\n        <span class=\"hljs-string\">&#x27; &#x27;</span> +\n        <span class=\"hljs-string\">&#x27;doe&#x27;</span>;\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> a=<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">const</span> b=<span class=\"hljs-string\">&#x27;john&#x27;</span>+\n      <span class=\"hljs-string\">&#x27; &#x27;</span>+\n      <span class=\"hljs-string\">&#x27;doe&#x27;</span>;\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"commas\">Commas</h4>\n<ul>\n<li>Never begin a line with <code>,</code> (always at the end of the previous line)</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">&#x27;some error message&#x27;</span>,\n        <span class=\"hljs-number\">12345</span>,\n        <span class=\"hljs-variable language_\">this</span>);\n\n<span class=\"hljs-comment\">// Wrong</span>\n<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">&#x27;some error message&#x27;</span>\n        ,<span class=\"hljs-number\">12345</span>\n        ,<span class=\"hljs-variable language_\">this</span>);\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"operators\">Operators</h4>\n<ul>\n<li>Never begin a line with an operator (always at the end of the previous line)</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&#x27;Hello &#x27;</span> +\n              <span class=\"hljs-string\">&#x27;Steve, &#x27;</span> +\n              <span class=\"hljs-string\">&#x27;How are you?&#x27;</span>;\n\n<span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-string\">&#x27;hello&#x27;</span> &amp;&amp;\n    result === <span class=\"hljs-string\">&#x27;ok&#x27;</span>) {\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;yes&#x27;</span>);\n}\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&#x27;Hello &#x27;</span>\n              + <span class=\"hljs-string\">&#x27;Steve, &#x27;</span>\n              + <span class=\"hljs-string\">&#x27;How are you?&#x27;</span>;\n\n<span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-string\">&#x27;hello&#x27;</span>\n    &amp;&amp; result === <span class=\"hljs-string\">&#x27;ok&#x27;</span>) {\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;yes&#x27;</span>);\n}\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"ternary-operators\">Ternary Operators</h4>\n<ul>\n<li>Never begin a line with a ternary operator. If a ternary statement must wrap, indent it further than the previous line by 4 spaces.</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"> <span class=\"hljs-comment\">// Right</span>\n\n <span class=\"hljs-keyword\">const</span> message = foo === bar ?\n     foo :\n     bar;\n\n <span class=\"hljs-comment\">// Wrong</span>\n\n <span class=\"hljs-keyword\">const</span> message = foo === bar\n     ? foo\n     : bar;\n     \n <span class=\"hljs-comment\">// Also Wrong</span>\n \n <span class=\"hljs-keyword\">const</span> message = (foo === bar ?\n                 foo :\n                 bar);\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"comments\">Comments</h4>\n<ul>\n<li><p>Always use <code>//</code> unless it&#39;s a jsDoc declaration or license header</p>\n</li>\n<li><p>Always begin sentences with an upper case</p>\n</li>\n<li><p>No trailing <code>.</code> unless comment contains multiple sentences</p>\n</li>\n<li><p>Formal style, consistent voice, no humor, present tense</p>\n</li>\n<li><p>No developer name or other personal notes</p>\n</li>\n<li><p>No TODOs</p>\n</li>\n<li><p>Line</p>\n<ul>\n<li>Provides narrative for the following single code line (or single statement broken for readability)</li>\n<li>One line of comment only</li>\n<li>One empty line before and none after the comment line</li>\n<li>No empty line before when following <code>{</code> unless other rules require it</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-comment\">// Initialize state</span>\n    <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">if</span> (condition) {\n        <span class=\"hljs-comment\">// Return message</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\n    }\n}\n</code></pre>\n</div><ul>\n<li>Segment<ul>\n<li>Provides narrative for the following code section (one or more lines of code, with or without line breaks)</li>\n<li>One or more lines of comments</li>\n<li>One empty line before and one after comments block</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-comment\">// Print each book&#x27;s name</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> book <span class=\"hljs-keyword\">in</span> books) {\n\n        <span class=\"hljs-comment\">// Check for valid properties</span>\n\n        <span class=\"hljs-keyword\">if</span> (books.<span class=\"hljs-title function_\">hasOwnProperty</span>(book)) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(book.<span class=\"hljs-property\">name</span>);\n        }\n    }\n}\n</code></pre>\n</div><ul>\n<li>Note<ul>\n<li>Explains the behaviour of a single code statement (can be broken into multiple lines)</li>\n<li>Used to document unexpected behaviour or non-standard practice</li>\n<li>Appears immediately at the end of the line (or statement) it describes, following whitespace to separate it from code block</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-params\">value</span>) {\n\n    <span class=\"hljs-keyword\">if</span> (value !== <span class=\"hljs-literal\">null</span> &amp;&amp;\n        value !== <span class=\"hljs-literal\">undefined</span>) {      <span class=\"hljs-comment\">// Explicit check as &#x27;value&#x27; can be 0</span>\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n    }\n}\n</code></pre>\n</div><h4 class=\"api-doc-header\" id=\"multi-line-statements\">Multi-line statements</h4>\n<ul>\n<li><p>Statements should only be broken into multiple lines to improve readability</p>\n</li>\n<li><p>Break statements if they are longer than 150 characters long</p>\n</li>\n<li><p>No empty lines in the middle of a single statement</p>\n</li>\n<li><p>Indent multi-line statements</p>\n</li>\n<li><p>Conditions should be indented to the first character of the condition in the first line</p>\n</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">if</span> (result &amp;&amp;\n    result.<span class=\"hljs-property\">status</span> &amp;&amp;\n    result.<span class=\"hljs-property\">status</span>.<span class=\"hljs-property\">statusCode</span> === <span class=\"hljs-number\">200</span>) {\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;success&#x27;</span>);\n}\n</code></pre>\n</div><ul>\n<li>Variable should be indented to the first character of the value in the first line</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&#x27;hello&#x27;</span> +\n              <span class=\"hljs-string\">&#x27; and welcome&#x27;</span>;\n</code></pre>\n</div><h2 class=\"api-doc-header\" id=\"node\">Node</h2>\n<h3 class=\"api-doc-header\" id=\"require\">Require</h3>\n<ul>\n<li>Use uppercase variable names for imported modules</li>\n<li>All require statements must be declared at the top of the module</li>\n<li>Always use relative paths</li>\n</ul>\n<h3 class=\"api-doc-header\" id=\"module-globals\">Module globals</h3>\n<ul>\n<li>Every module can only have two top level globals (except for imported modules):<ul>\n<li><code>exports</code> - defined automatically by node</li>\n<li><code>internals</code> - must be declared as an object at the top of each module immediate following the <code>require</code> section</li>\n</ul>\n</li>\n<li>Any variable global to the module must be a property of <code>internals</code>, including constants</li>\n<li>If a module has automatically executing code, it must be contained within a function (using the <code>internals</code> namespace) and called at the top of the module after the <code>internals</code> declaration.</li>\n</ul>\n<div class=\"code-snippet\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Right</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Hapi</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;hapi&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Hoek</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;hoek&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Package</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./package.json&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> internals = {\n    <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span>\n};\n\ninternals.<span class=\"hljs-property\">init</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n    <span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Hapi</span>.<span class=\"hljs-title class_\">Server</span>();\n    ...\n};\n\ninternals.<span class=\"hljs-title function_\">init</span>();\n\n<span class=\"hljs-comment\">// Also right</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Hapi</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;hapi&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> internals = {};\n\ninternals.<span class=\"hljs-property\">package</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./package.json&#x27;</span>);\ninternals.<span class=\"hljs-property\">foo</span> = <span class=\"hljs-string\">&#x27;bar&#x27;</span>;\ninternals.<span class=\"hljs-property\">init</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n\n   <span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Hapi</span>.<span class=\"hljs-title function_\">server</span>();\n   ...\n};\n\ninternals.<span class=\"hljs-title function_\">init</span>();\n\n<span class=\"hljs-comment\">// Wrong</span>\n\n<span class=\"hljs-keyword\">const</span> hapi = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;hapi&#x27;</span>); <span class=\"hljs-comment\">// Use uppercase name</span>\n\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-string\">&#x27;bar&#x27;</span>; <span class=\"hljs-comment\">// No global vars outside of internals</span>\n\n<span class=\"hljs-keyword\">const</span> internals = {\n    <span class=\"hljs-title class_\">Foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> <span class=\"hljs-comment\">// Don&#x27;t use uppercase vars inside internals</span>\n};\n\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Hapi</span>.<span class=\"hljs-title class_\">Server</span>(); <span class=\"hljs-comment\">// No global vars outside of internals and exports / Set up your module inside an init() function</span>\n...\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Hoek</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;hoek&#x27;</span>); <span class=\"hljs-comment\">// Declare modules at the top of the module</span>\n</code></pre>\n</div><h3 class=\"api-doc-header\" id=\"variable-names\">Variable names</h3>\n<ul>\n<li><code>err</code> is reserved for errors received via a callback. Use <code>error</code> for local function variables</li>\n</ul>\n<h3 class=\"api-doc-header\" id=\"callback\">Callback</h3>\n<ul>\n<li>First argument must always be <code>err</code></li>\n<li>Inline callbacks must use arrow functions</li>\n<li>If a function takes a <code>callback</code> argument, it <strong>must</strong> be called on <code>process.nextTick()</code>. Otherwise, the argument name <strong>must</strong> be <code>next</code> to clearly declare that it may get called on same tick</li>\n<li>Callbacks should always be called with explicit <code>return</code></li>\n</ul>\n<h3 class=\"api-doc-header\" id=\"promises\">Promises</h3>\n<ul>\n<li>Public interfaces should (not must) return a promise when no callback is provided</li>\n<li>Promises should not be used internally</li>\n<li>Only native promises are allowed. Third party promise implementations are not allowed</li>\n</ul>\n"}